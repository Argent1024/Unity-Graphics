#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"


#pragma kernel KCIExyGen
#define GROUP_SIZE_X 8
#define GROUP_SIZE_Y 8


RWStructuredBuffer<uint> _xyBuffer;
TEXTURE2D_X(_SourceTexture);

float4 _HDROutputParams;
#define _MinNits    _HDROutputParams.x
#define _MaxNits    _HDROutputParams.y
#define _PaperWhite _HDROutputParams.z
#define _IsRec709 (int)(_HDROutputParams.w == 1)


float2 RGBtoxy(float3 rgb)
{
    float3 XYZ = 0;
    if (_IsRec709)
    {
        XYZ = RotateRec709ToXYZ(rgb);
    }
    else
    {
        XYZ = RotateRec2020ToXYZ(rgb);
    }
    return XYZ.xy / (dot(XYZ, 1));
}

[numthreads(GROUP_SIZE_X, GROUP_SIZE_Y, 1)]
void KCIExyGen(uint groupIndex : SV_GroupIndex,
    uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);
    float3 rgbData = LOAD_TEXTURE2D_X(_SourceTexture, dispatchThreadId.xy).rgb;


}
